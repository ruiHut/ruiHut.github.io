<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZhouWang`s Blogs Space</title>
    <link>http://ruihut.github.io/post/</link>
    <description>Recent content in Posts on ZhouWang`s Blogs Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Sep 2019 22:29:07 +0800</lastBuildDate>
    
	<atom:link href="http://ruihut.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入浅出理解 Golang Channel </title>
      <link>http://ruihut.github.io/post/golang-channel/</link>
      <pubDate>Tue, 10 Sep 2019 22:29:07 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/golang-channel/</guid>
      <description>序 channel 是 Go 语言中的一个非常重要的特性, 是 Go 在并发编程中与大多数语言不同的一点，上文谈到大多数语言在解决并发同步问题上采用的是 “共享内存模型” 来</description>
    </item>
    
    <item>
      <title>Golang 并发控制与通信</title>
      <link>http://ruihut.github.io/post/golang-context/</link>
      <pubDate>Mon, 09 Sep 2019 09:14:05 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/golang-context/</guid>
      <description>序 对于 golang 而言，我们避不开的要谈到它一直被吹捧的一大优势 - 原生支持并发。并发编程是自从摩尔定律逐渐失效，硬件工程师将性能提升的任务逐渐以多核、</description>
    </item>
    
    <item>
      <title>深入理解计算机系统 大端还是小端？</title>
      <link>http://ruihut.github.io/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E5%A4%A7%E7%AB%AF%E8%BF%98%E6%98%AF%E5%B0%8F%E7%AB%AF/</link>
      <pubDate>Thu, 05 Sep 2019 22:47:30 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F-%E5%A4%A7%E7%AB%AF%E8%BF%98%E6%98%AF%E5%B0%8F%E7%AB%AF/</guid>
      <description>字节顺序（Endianness） wiki 在计算机科学领域中，指存储器中或在数字通信链路中，组成多字节的字(例如 int32 四字节，short 两字节)的字节的</description>
    </item>
    
    <item>
      <title>Golang Map 入门到实现</title>
      <link>http://ruihut.github.io/post/golang-map/</link>
      <pubDate>Wed, 04 Sep 2019 14:44:45 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/golang-map/</guid>
      <description>哈希表是一种巧妙并且实用的数据结构。它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间</description>
    </item>
    
    <item>
      <title>Golang Modules 的前世今生</title>
      <link>http://ruihut.github.io/post/golang-modules/</link>
      <pubDate>Fri, 30 Aug 2019 15:23:26 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/golang-modules/</guid>
      <description>序 $GOPATH/go.mod exists but should not 在学习 golang 之初，便对 golang 的包管理一直一知半解(尤其是一上来就是要了解 gopath、goroot)。本文就 1.11 新特性 Modules 的前世今生，对 golang 的</description>
    </item>
    
    <item>
      <title>gRpc 实践到原理</title>
      <link>http://ruihut.github.io/post/gRpc-%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 30 Aug 2019 10:08:26 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/gRpc-%E5%AE%9E%E8%B7%B5%E5%88%B0%E5%8E%9F%E7%90%86/</guid>
      <description>简述 gRpc gRpc 是什么? 官网简介 &amp;gt;gRPC is a modern open source high performance RPC framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services. Wiki</description>
    </item>
    
    <item>
      <title>Golang sync.Mutex 源码分析</title>
      <link>http://ruihut.github.io/post/golang-lock/</link>
      <pubDate>Thu, 29 Aug 2019 13:59:14 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/golang-lock/</guid>
      <description>序 本文整理了锁的分类与实现，抽取了 golang 1.12 的源码分析， 什么是锁？ 当我们在谈论锁的时候，我们在谈什么？ Wiki In computer science, a lock or mutex (from mutual exclusion) is a synchronization mechanism for enforcing limits on access to a</description>
    </item>
    
    <item>
      <title>细说 IoC</title>
      <link>http://ruihut.github.io/post/IOC/</link>
      <pubDate>Wed, 28 Aug 2019 18:07:18 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/IOC/</guid>
      <description>序 IoC 是一种设计原则，降低代码控制流之间的耦合，本文将细说 IoC 的思想与基本实现，以及在 Spring 中的实现原理。 IoC 控制反转是什么？ Wiki In software engineering, inversion of control (IoC) is a programming principle(n.</description>
    </item>
    
    <item>
      <title>Docker 那些事</title>
      <link>http://ruihut.github.io/post/docker/</link>
      <pubDate>Wed, 28 Aug 2019 12:07:48 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/docker/</guid>
      <description>序 从今年 3 月份实习接触 golang 起，Docker 就时不时出现， 也曾看过几篇简介博文，但都没有后续。本文就对于 docker 进行一次简单的探究。 Docker是什么</description>
    </item>
    
    <item>
      <title>Redis字典的实现 《Redis设计与实现》</title>
      <link>http://ruihut.github.io/post/redis-hash/</link>
      <pubDate>Wed, 28 Aug 2019 11:09:30 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/redis-hash/</guid>
      <description>Redis字典的实现 《Redis设计与实现》 实现字典的方法有很多种: 1 2 3 1. 最简单的就是使用链表或数组，但是这种方式只适用于元素个数不多的情</description>
    </item>
    
    <item>
      <title>Switch 机器级探究(C语言)</title>
      <link>http://ruihut.github.io/post/swich/</link>
      <pubDate>Wed, 28 Aug 2019 10:57:05 +0800</pubDate>
      
      <guid>http://ruihut.github.io/post/swich/</guid>
      <description>上图中对于一个简单的 C(此例中由于 C 只支持对于数字的比较，对于某些其他高级语言 例如 javascript 可以对字符进行比较。其具体对汇编代码略有不同) switch 语句进行</description>
    </item>
    
  </channel>
</rss>